From 1f538753eb1e219c325c6e87c387cb27c7a49759 Mon Sep 17 00:00:00 2001
From: Julius Koskela <julius.koskela@unikie.com>
Date: Fri, 11 Jul 2025 16:37:57 +0300
Subject: [PATCH 2/2] arm/virt: Properly map nvidia_bpmp_guest MMIO region and
 add debug logging

The nvidia_bpmp_guest device needs to be explicitly mapped to the
guest's memory space at address 0x090c0000. Without this explicit
mapping, the device exists in QEMU but is not accessible from the
guest kernel.

This commit:
1. Ensures the device is both created and properly mapped using
   sysbus_mmio_map(), which makes the MMIO region visible in the
   guest's /proc/iomem.
2. Adds comprehensive debug logging to track BPMP communication:
   - All MMIO writes with offset, value, and size
   - MRQ command details (cmd, tx_size, rx_size)
   - File descriptor operations when writing to /dev/bpmp-host
   - Read/write failures with errno details
   - Response data from the host

These debug messages will help identify where the BPMP message
transfer is failing between the guest proxy and QEMU device.

Signed-off-by: Julius Koskela <julius.koskela@unikie.com>
---
 hw/arm/virt.c               |  9 ++++++++-
 hw/misc/nvidia_bpmp_guest.c | 28 ++++++++++++++++++++++++++++
 2 files changed, 36 insertions(+), 1 deletion(-)

diff --git a/hw/arm/virt.c b/hw/arm/virt.c
index 10fd2e9f93..b5126bd795 100644
--- a/hw/arm/virt.c
+++ b/hw/arm/virt.c
@@ -2437,7 +2437,14 @@ static void machvirt_init(MachineState *machine)
      * This is required for GPU passthrough on Jetson platforms
      */
     if (vms->memmap[VIRT_NVIDIA_BPMP_GUEST].base) {
-        nvidia_bpmp_guest_create(vms->memmap[VIRT_NVIDIA_BPMP_GUEST].base);
+        DeviceState *dev;
+        hwaddr base = vms->memmap[VIRT_NVIDIA_BPMP_GUEST].base;
+        
+        dev = nvidia_bpmp_guest_create(base);
+        if (dev) {
+            /* Explicitly map the device to ensure it's accessible from guest */
+            sysbus_mmio_map(SYS_BUS_DEVICE(dev), 0, base);
+        }
     }
 
     if (machine->nvdimms_state->is_enabled) {
diff --git a/hw/misc/nvidia_bpmp_guest.c b/hw/misc/nvidia_bpmp_guest.c
index 3facee6d00..f55a652576 100644
--- a/hw/misc/nvidia_bpmp_guest.c
+++ b/hw/misc/nvidia_bpmp_guest.c
@@ -68,6 +68,9 @@ static void nvidia_bpmp_guest_write(void *opaque, hwaddr addr, uint64_t data, un
 	NvidiaBpmpGuestState *s = opaque;
 	int ret;
 
+	fprintf(stderr, "BPMP_GUEST: write at offset 0x%lx, value 0x%lx, size %d\n", 
+	        (unsigned long)addr, (unsigned long)data, size);
+
 	struct
 	{
 		unsigned int mrq;
@@ -101,12 +104,33 @@ static void nvidia_bpmp_guest_write(void *opaque, hwaddr addr, uint64_t data, un
 		messg.rx.data = &s->mem[RX_BUF];
 		memcpy(&messg.rx.size, &s->mem[RX_SIZ], sizeof(messg.rx.size));
 
+		fprintf(stderr, "BPMP_GUEST: MRQ write - cmd=0x%x, tx_size=%zu, rx_size=%zu\n",
+		        messg.mrq, messg.tx.size, messg.rx.size);
+
+		fprintf(stderr, "BPMP_GUEST: Writing to fd %d\n", s->host_device_fd);
 		ret = write(s->host_device_fd, &messg, sizeof(messg)); // Send the data to the host module
 		if (ret < 0)
 		{
+			fprintf(stderr, "BPMP_GUEST: Write failed! ret=%d, errno=%d (%s)\n",
+			        ret, errno, strerror(errno));
 			qemu_log_mask(LOG_UNIMP, "%s: Failed to write the host device..\n", __func__);
 			return;
 		}
+		fprintf(stderr, "BPMP_GUEST: Write successful (%d bytes), reading response...\n", ret);
+		
+		ret = read(s->host_device_fd, &messg, sizeof(messg));
+		if (ret < 0)
+		{
+			fprintf(stderr, "BPMP_GUEST: Read failed! ret=%d, errno=%d (%s)\n",
+			        ret, errno, strerror(errno));
+			messg.rx.ret = -EIO;
+			messg.rx.size = 0;
+		}
+		else
+		{
+			fprintf(stderr, "BPMP_GUEST: Response - ret=%d, rx_size=%zu\n",
+			        messg.rx.ret, messg.rx.size);
+		}
 
 		memcpy(&s->mem[RET_COD], &messg.rx.ret, sizeof(messg.rx.ret));
 		memcpy(&s->mem[RX_SIZ], &messg.rx.size, sizeof(messg.rx.size));
@@ -139,9 +163,13 @@ static void nvidia_bpmp_guest_instance_init(Object *obj)
 
 	if (s->host_device_fd < 0)
 	{
+		fprintf(stderr, "BPMP_GUEST: Failed to open %s: errno=%d (%s)\n", 
+		        HOST_DEVICE_PATH, errno, strerror(errno));
 		qemu_log_mask(LOG_UNIMP, "%s: Failed to open the host device..\n", __func__);
 		return;
 	}
+	fprintf(stderr, "BPMP_GUEST: Successfully opened %s, fd=%d\n", 
+	        HOST_DEVICE_PATH, s->host_device_fd);
 }
 
 /* create a new type to define the info related to our device */
-- 
2.49.0
